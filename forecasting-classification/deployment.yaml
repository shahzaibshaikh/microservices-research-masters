apiVersion: v1
kind: ServiceAccount
metadata:
  name: forecasting-scaling-sa
  namespace: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: monitoring
  name: forecasting-scaling-role
rules:
  - apiGroups: [""]  # Core API group
    resources: ["pods", "deployments", "replicasets", "nodes"]
    verbs: ["get", "list", "watch", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: forecasting-scaling-binding
  namespace: monitoring
subjects:
  - kind: ServiceAccount
    name: forecasting-scaling-sa
    namespace: monitoring
roleRef:
  kind: Role
  name: forecasting-scaling-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: forecasting-scaling-depl
  namespace: monitoring
  labels:
    app: forecasting-scaling
spec:
  replicas: 1
  selector:
    matchLabels:
      app: forecasting-scaling
  template:
    metadata:
      labels:
        app: forecasting-scaling
    spec:
      serviceAccountName: forecasting-scaling-sa
      containers:
        - name: forecasting-scaling-container
          image: shahzaibshaikh/forecasting-scaling:latest
          imagePullPolicy: Always
          resources:
            limits:
              memory: "3G"
              cpu: "1500m"
            requests:
              memory: "2G"
              cpu: "1"
          volumeMounts:
            - name: log-volume
              mountPath: /var/log
          env:
            - name: KUBERNETES_SERVICE_HOST
              value: kubernetes.default.svc.cluster.local
          command: ["/bin/bash", "-c"]
          args:
            - >
              cron && python /app/scaling.py;
              tail -f /var/log/cron.log
      volumes:
        - name: log-volume
          emptyDir: {}
